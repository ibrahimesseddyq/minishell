int	check_dir_exist(char *path)
{
	char		**splitted_path;
	int			i;
	struct stat	statbuf;
	char		*full_dir;

	full_dir = NULL;
	splitted_path = ft_split(path, '/');
	i  = 0;
	// while (splitted_path[i] && path[ft_strlen(path) - 1] != '/')
	// {
	// 	i++;
	// }
	if (path[0] == '/')
	{
		i = 0;
		full_dir = ft_strdup("/");
		while (splitted_path[i])
		{
			full_dir = ft_strjoin(full_dir, ft_strjoin(splitted_path[i], "/"));
			fprintf(stderr, "file[%s]\n", full_dir);
			if (stat(full_dir, sds&statbuf) != 0)
			{
				write(2, "no such file or directory\n", 27);
				ft_exit(1, SET_EXIT_STATUS);
				return (0);
			}
			i++;
		}
		
	}
	else
	{
		if (path[0] == '.')
		{
			i = 1;
			full_dir = ft_strdup("");
			while (splitted_path[i])
			{
				full_dir = ft_strjoin(full_dir, ft_strjoin(splitted_path[i], "/"));
				fprintf(stderr, "file[%s]\n", full_dir);
				if (stat(full_dir, &statbuf) != 0)
				{
					write(2, "no such file or directory\n", 27);
					ft_exit(1, SET_EXIT_STATUS);
					return (0);
				}
				i++;
			}
		}
		else
		{
			i = 0;
			full_dir = ft_strdup("");
			while (splitted_path[i])
			{
				full_dir = ft_strjoin(full_dir, ft_strjoin(splitted_path[i], "/"));
				fprintf(stderr, "file[%s]\n", full_dir);
				if (stat(full_dir, &statbuf) != 0)
				{
					write(2, "no such file or directory\n", 27);
					ft_exit(1, SET_EXIT_STATUS);
					return (0);
				}
				i++;
			}
		}
	}

	return (1);
}

	// while(splitted_path[i])
	// {
	// 	printf("sp 1 [%s] sp 2[%s]\n",splitted_path[i], splitted_path[i + 1] );

	// 		if (path[0] != '/')
	// 			full_dir = ft_strjoin(ft_strjoin(full_dir, "/"), splitted_path[i]);
	// 		else
	// 			full_dir = ft_strjoin(full_dir, ft_strjoin(splitted_path[i], "/"));
	// 		fprintf(stderr, "file[%s]\n", full_dir);
	// 		if (stat(full_dir, &statbuf) != 0)
	// 		{
	// 			write(2, "no such file or directory\n", 27);
	// 			ft_exit(1, SET_EXIT_STATUS);
	// 			return (0);
	// 		}
	// 	i++;
	// }
int	check_error_redir_out(t_redir *redir)
{
	if (redir->file && !redir->file[0])
		return (write(2, "No such file or dir\n", 21), -2);
	if (!redir->file)
		return (write(2, "ambigiuos redir\n", 17), -2);
	return (1);
}```